source("G:/My Drive/School/2023/MS Club/Part 3/pokemon.r", echo=TRUE)
source("G:/My Drive/School/2023/MS Club/Part 3/pokemon.r", echo=TRUE)
glimpse(pokedex)
source("G:/My Drive/School/2023/MS Club/Part 3/pokemon.r", echo=TRUE)
glimpse(pokedex)
View(legend_by_stats_plot)
View(legend_by_stats)
# Print the plot
legend_by_stats_plot
# Set seed for reproducibility
set.seed(1234)
# Save number of rows in dataset
n <- nrow(pokedex)
# Generate 60% sample of rows
sample_rows <- sample(n, 0.6*n)
# Create training set
pokedex_train <- pokedex  %>%
filter(row_number() %in% sample_rows)
# Create test set
pokedex_test <- pokedex  %>%
filter(!row_number() %in% sample_rows)
# Load packages and set seed
library(rpart)
library(rpart.plot)
set.seed(1234)
# Fit decision tree
model_tree <- rpart(is_legendary ~ attack + defense + height_m +
hp + sp_attack + sp_defense + speed + type1 + weight_kg,
data = pokedex_train,
method = "class",
na.action = na.omit)
# Plot decision tree
rpart.plot(model_tree)
# Load package and set seed
library(randomForest)
set.seed(1234)
# Fit random forest
model_forest <- randomForest(is_legendary ~ attack + defense + height_m +
hp + sp_attack + sp_defense + speed + type1 + weight_kg,
data = pokedex_train,
importance = TRUE,
na.action = na.omit)
# Print model output
model_forest
random_state <- .Random.seed
# Load the ROCR package
library(ROCR)
# Create prediction and performance objects for the decision tree
probs_tree <- predict(model_tree, pokedex_test, type = "prob")
pred_tree <- prediction(probs_tree[,2], pokedex_test$is_legendary)
perf_tree <- performance(pred_tree, "tpr", "fpr")
# Create prediction and performance objects for the random forest
probs_forest <- predict(model_forest, pokedex_test, type = "prob")
pred_forest <- prediction(probs_forest[,2], pokedex_test$is_legendary)
perf_forest <- performance(pred_forest, "tpr", "fpr")
# Create prediction and performance objects for the random forest
probs_forest <- predict(model_forest, pokedex_test, type = "prob")
pred_forest <- prediction(probs_forest[,2], pokedex_test$is_legendary)
# Create training set
pokedex_train <- pokedex  %>%
filter(row_number() %in% sample_rows) %>%
na.omit()
# Create test set
pokedex_test <- pokedex  %>%
filter(!row_number() %in% sample_rows) %>%
na.omit()
set.seed(1234)
# Fit decision tree
model_tree <- rpart(is_legendary ~ attack + defense + height_m +
hp + sp_attack + sp_defense + speed + type1 + weight_kg,
data = pokedex_train,
method = "class",
na.action = na.omit)
# Plot decision tree
rpart.plot(model_tree)
# Load package and set seed
library(randomForest)
# Create training set
pokedex_train <- pokedex  %>%
filter(row_number() %in% sample_rows)
# Create test set
pokedex_test <- pokedex  %>%
filter(!row_number() %in% sample_rows)
set.seed(1234)
# Fit decision tree
model_tree <- rpart(is_legendary ~ attack + defense + height_m +
hp + sp_attack + sp_defense + speed + type1 + weight_kg,
data = pokedex_train,
method = "class",
na.action = na.omit)
# Plot decision tree
rpart.plot(model_tree)
set.seed(1234)
# Create test set
pokedex_test <- pokedex  %>%
filter(!row_number() %in% sample_rows) %>%
na.omit()
set.seed(1234)
# Fit random forest
model_forest <- randomForest(is_legendary ~ attack + defense + height_m +
hp + sp_attack + sp_defense + speed + type1 + weight_kg,
data = pokedex_train,
importance = TRUE,
na.action = na.omit)
# Print model output
model_forest
random_state <- .Random.seed
# Load the ROCR package
library(ROCR)
# Create prediction and performance objects for the decision tree
probs_tree <- predict(model_tree, pokedex_test, type = "prob")
pred_tree <- prediction(probs_tree[,2], pokedex_test$is_legendary)
perf_tree <- performance(pred_tree, "tpr", "fpr")
# Create prediction and performance objects for the random forest
probs_forest <- predict(model_forest, pokedex_test, type = "prob")
pred_forest <- prediction(probs_forest[,2], pokedex_test$is_legendary)
perf_forest <- performance(pred_forest, "tpr", "fpr")
# Plot the ROC curves
plot(perf_tree, col = "red", main = "ROC curves")
plot(perf_forest, add = TRUE, col = "blue")
legend(x = "bottomright",  legend = c("Decision Tree", "Random Forest"), fill = c("red", "blue"))
# Print variable importance measures
importance_forest <- importance(model_forest)
importance_forest
# Create a dotchart of variable importance
varImpPlot_forest <- varImpPlot(model_forest)
varImpPlot_forest
soln_importance_forest <- importance(soln_model_forest)
source("G:/My Drive/School/2023/MS Club/Part 3/pokemon.r", echo=TRUE)
# Print the plot
legend_by_type_plot
# Print the plot
legend_by_stats_plot
# Prepare the plot
legend_by_heightweight_plot <- pokedex %>%
ggplot(aes(x = height_m, y = weight_kg)) +
geom_point(aes(color = is_legendary), size = 2, alpha = 0.5) +
geom_text(aes(label = ifelse(height_m > 7.5|weight_kg > 600, as.character(name), '')),
vjust = 0, hjust = 0) +
geom_smooth(method = "lm", se = FALSE, col = "black", linetype = "dashed") +
expand_limits(x = 16) +
labs(title = "Legendary Pokemon by height and weight",
x = "Height (m)",
y = "Weight (kg)") +
guides(color = guide_legend(title = "Pokemon status")) +
scale_color_manual(labels = c("Non-Legendary", "Legendary"),
values = c("#F8730D", "#00eFC4")) +
theme_bw()
# Print the plot
legend_by_heightweight_plot
# Prepare the plot
legend_by_heightweight_plot <- pokedex %>%
ggplot(aes(x = height_m, y = weight_kg)) +
geom_point(aes(color = is_legendary), size = 2, alpha = 0.5, color = black) +
geom_text(aes(label = ifelse(height_m > 7.5|weight_kg > 600, as.character(name), '')),
vjust = 0, hjust = 0) +
geom_smooth(method = "lm", se = FALSE, col = "black", linetype = "dashed") +
expand_limits(x = 16) +
labs(title = "Legendary Pokemon by height and weight",
x = "Height (m)",
y = "Weight (kg)") +
guides(color = guide_legend(title = "Pokemon status")) +
scale_color_manual(labels = c("Non-Legendary", "Legendary"),
values = c("#F8730D", "#00eFC4")) +
theme_bw()
# Print the plot
legend_by_type_plot
source("G:/My Drive/School/2023/MS Club/Part 3/pokemon.r", echo=TRUE)
